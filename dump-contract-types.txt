Running script with 1 thread(s), pid 25 and args: [].
dump-contract-types.js: Array Jumping Game II
dump-contract-types.js: You are given the following array of integers:

 4,2,1,3,3,0,4

 Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. 

Assuming you are initially positioned at the start of the array, determine the minimum number of jumps to reach the end of the array.

 If it's impossible to reach the end, then the answer should be 0.
dump-contract-types.js: [4,2,1,3,3,0,4]
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Find Largest Prime Factor
dump-contract-types.js: A prime factor is a factor that is a prime number. What is the largest prime factor of 101219125?
dump-contract-types.js: 101219125
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Encryption I: Caesar Cipher
dump-contract-types.js: Caesar cipher is one of the simplest encryption technique. It is a type of substitution cipher in which each letter in the plaintext  is replaced by a letter some fixed number of positions down the alphabet. For example, with a left shift of 3, D would be replaced by A,  E would become B, and A would become X (because of rotation).

 You are given an array with two elements:
 &nbsp;&nbsp;["MODEM MOUSE ARRAY PRINT LOGIC", 25]
 The first element is the plaintext, the second element is the left shift value.

 Return the ciphertext as uppercase string. Spaces remains the same.
dump-contract-types.js: ["MODEM MOUSE ARRAY PRINT LOGIC",25]
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Total Ways to Sum II
dump-contract-types.js: How many different distinct ways can the number 159 be written as a sum of integers contained in the set:

 [1,3,5,6,8,10,13,14]?

 You may use each integer in the set zero or more times.
dump-contract-types.js: [159,[1,3,5,6,8,10,13,14]]
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Algorithmic Stock Trader I
dump-contract-types.js: You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:

 161,98,184,73,60,75,89,115,183,190,75,177,32,127,40,32

 Determine the maximum possible profit you can earn using at most one transaction (i.e. you can only buy and sell the stock once). If no profit can be made then the answer should be 0. Note that you have to buy the stock before you can sell it
dump-contract-types.js: [161,98,184,73,60,75,89,115,183,190,75,177,32,127,40,32]
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Merge Overlapping Intervals
dump-contract-types.js: Given the following array of arrays of numbers representing a list of intervals, merge all overlapping intervals.

 [[24,29],[3,9],[4,10],[23,26],[2,6],[20,27],[22,31],[6,13],[10,20],[24,27]]

 Example:

 [[1, 3], [8, 10], [2, 6], [10, 16]]

 would merge into [[1, 6], [8, 16]].

 The intervals must be returned in ASCENDING order. You can assume that in an interval, the first number will always be smaller than the second.
dump-contract-types.js: [[24,29],[3,9],[4,10],[23,26],[2,6],[20,27],[22,31],[6,13],[10,20],[24,27]]
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Unique Paths in a Grid I
dump-contract-types.js: You are in a grid with 6 rows and 12 columns, and you are positioned in the top-left corner of that grid. You are trying to reach the bottom-right corner of the grid, but you can only move down or right on each step. Determine how many unique paths there are from start to finish.

 NOTE: The data returned for this contract is an array with the number of rows and columns:

 [6, 12]
dump-contract-types.js: [6,12]
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Generate IP Addresses
dump-contract-types.js: Given the following string containing only digits, return an array with all possible valid IP address combinations that can be created from the string:

 11721161222

 Note that an octet cannot begin with a '0' unless the number itself is actually 0. For example, '192.168.010.1' is not a valid IP.

 Examples:

 25525511135 -> ["255.255.11.135", "255.255.111.35"]
 1938718066 -> ["193.87.180.66"]
dump-contract-types.js: 11721161222
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Compression III: LZ Compression
dump-contract-types.js: Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:

 1. Exactly L characters, which are to be copied directly into the uncompressed data.
 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.

 For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.

 You are given the following input string:
 &nbsp; &nbsp; iiDkUvoGEiDkUvoGEicM25Y4CvCvCvCvCvsvCvCvsvCAgPx1sPx1sP0b0sP0b0sssss
 Encode it using Lempel-Ziv encoding with the minimum possible output length.

 Examples (some have other possible encodings of minimal length):
 &nbsp; &nbsp; abracadabra &nbsp; &nbsp; -> &nbsp;7abracad47
 &nbsp; &nbsp; mississippi &nbsp; &nbsp; -> &nbsp;4miss433ppi
 &nbsp; &nbsp; aAAaAAaAaAA &nbsp; &nbsp; -> &nbsp;3aAA53035
 &nbsp; &nbsp; 2718281828 &nbsp; &nbsp; &nbsp;-> &nbsp;627182844
 &nbsp; &nbsp; abcdefghijk &nbsp; &nbsp; -> &nbsp;9abcdefghi02jk
 &nbsp; &nbsp; aaaaaaaaaaaa &nbsp; &nbsp;-> &nbsp;3aaa91
 &nbsp; &nbsp; aaaaaaaaaaaaa &nbsp; -> &nbsp;1a91031
 &nbsp; &nbsp; aaaaaaaaaaaaaa &nbsp;-> &nbsp;1a91041
dump-contract-types.js: iiDkUvoGEiDkUvoGEicM25Y4CvCvCvCvCvsvCvCvsvCAgPx1sPx1sP0b0sP0b0sssss
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Minimum Path Sum in a Triangle
dump-contract-types.js: Given a triangle, find the minimum path sum from top to bottom. In each step of the path, you may only move to adjacent numbers in the row below. The triangle is represented as a 2D array of numbers:

 [
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,7],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7,5,6],
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[8,5,3,8],
&nbsp;&nbsp;&nbsp;&nbsp;[8,3,1,9,8],
&nbsp;&nbsp;&nbsp;[9,7,4,7,4,4],
&nbsp;&nbsp;[2,4,4,1,6,8,4]
]

 Example: If you are given the following triangle:

[
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2],
 &nbsp;&nbsp;&nbsp;&nbsp;[3,4],
 &nbsp;&nbsp;&nbsp;[6,5,7],
 &nbsp;&nbsp;[4,1,8,3]
 ]

 The minimum path sum is 11 (2 -> 3 -> 5 -> 1).
dump-contract-types.js: [[1],[9,7],[7,5,6],[8,5,3,8],[8,3,1,9,8],[9,7,4,7,4,4],[2,4,4,1,6,8,4]]
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Compression I: RLE Compression
dump-contract-types.js: Run-length encoding (RLE) is a data compression technique which encodes data as a series of runs of a repeated single character. Runs are encoded as a length, followed by the character itself. Lengths are encoded as a single ASCII digit; runs of 10 characters or more are encoded by splitting them into multiple runs.

 You are given the following input string:
 &nbsp; &nbsp; VVxxffffffffffffeCCCCCCsssFFFFFFFR111111115500eeGGGGGGGGGGYYYYYY74444111
 Encode it using run-length encoding with the minimum possible output length.

 Examples:
 &nbsp; &nbsp; aaaaabccc &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;5a1b3c
 &nbsp; &nbsp; aAaAaA &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;1a1A1a1A1a1A
 &nbsp; &nbsp; 111112333 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;511233
 &nbsp; &nbsp; zzzzzzzzzzzzzzzzzzz &nbsp;-> &nbsp;9z9z1z &nbsp;(or 9z8z2z, etc.)
dump-contract-types.js: VVxxffffffffffffeCCCCCCsssFFFFFFFR111111115500eeGGGGGGGGGGYYYYYY74444111
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Encryption II: Vigenère Cipher
dump-contract-types.js: Vigenère cipher is a type of polyalphabetic substitution. It uses  the Vigenère square to encrypt and decrypt plaintext with a keyword.

 &nbsp;&nbsp;Vigenère square:
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; +----------------------------------------------------
 &nbsp;&nbsp;&nbsp;&nbsp; A | A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 
 &nbsp;&nbsp;&nbsp;&nbsp; B | B C D E F G H I J K L M N O P Q R S T U V W X Y Z A 
 &nbsp;&nbsp;&nbsp;&nbsp; C | C D E F G H I J K L M N O P Q R S T U V W X Y Z A B
 &nbsp;&nbsp;&nbsp;&nbsp; D | D E F G H I J K L M N O P Q R S T U V W X Y Z A B C
 &nbsp;&nbsp;&nbsp;&nbsp; E | E F G H I J K L M N O P Q R S T U V W X Y Z A B C D
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...
 &nbsp;&nbsp;&nbsp;&nbsp; Y | Y Z A B C D E F G H I J K L M N O P Q R S T U V W X
 &nbsp;&nbsp;&nbsp;&nbsp; Z | Z A B C D E F G H I J K L M N O P Q R S T U V W X Y

 For encryption each letter of the plaintext is paired with the corresponding letter of a repeating keyword. For example, the plaintext DASHBOARD is encrypted with the keyword LINUX:
 &nbsp;&nbsp; Plaintext: DASHBOARD
 &nbsp;&nbsp; Keyword:&nbsp;&nbsp;&nbsp;LINUXLINU
 So, the first letter D is paired with the first letter of the key L. Therefore, row D and column L of the  Vigenère square are used to get the first cipher letter O. This must be repeated for the whole ciphertext.

 You are given an array with two elements:
 &nbsp;&nbsp;["MODEMPOPUPTRASHINBOXARRAY", "COMPUTER"]
 The first element is the plaintext, the second element is the keyword.

 Return the ciphertext as uppercase string.
dump-contract-types.js: ["MODEMPOPUPTRASHINBOXARRAY","COMPUTER"]
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Algorithmic Stock Trader II
dump-contract-types.js: You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:

 176,170,185,78,103,58,186,132,145,31,170,120,173,123,98,90,79,143,56,184,161,77,105,174,48,122,85

 Determine the maximum possible profit you can earn using as many transactions as you'd like. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.

 If no profit can be made, then the answer should be 0
dump-contract-types.js: [176,170,185,78,103,58,186,132,145,31,170,120,173,123,98,90,79,143,56,184,161,77,105,174,48,122,85]
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Total Ways to Sum
dump-contract-types.js: It is possible write four as a sum in exactly four different ways:

 &nbsp;&nbsp;&nbsp;&nbsp;3 + 1
 &nbsp;&nbsp;&nbsp;&nbsp;2 + 2
 &nbsp;&nbsp;&nbsp;&nbsp;2 + 1 + 1
 &nbsp;&nbsp;&nbsp;&nbsp;1 + 1 + 1 + 1

 How many different distinct ways can the number 29 be written as a sum of at least two positive integers?
dump-contract-types.js: 29
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Compression II: LZ Decompression
dump-contract-types.js: Lempel-Ziv (LZ) compression is a data compression technique which encodes data using references to earlier parts of the data. In this variant of LZ, data is encoded in two types of chunk. Each chunk begins with a length L, encoded as a single ASCII digit from 1 to 9, followed by the chunk data, which is either:

 1. Exactly L characters, which are to be copied directly into the uncompressed data.
 2. A reference to an earlier part of the uncompressed data. To do this, the length is followed by a second ASCII digit X: each of the L output characters is a copy of the character X places before it in the uncompressed data.

 For both chunk types, a length of 0 instead means the chunk ends immediately, and the next character is the start of a new chunk. The two chunk types alternate, starting with type 1, and the final chunk may be of either type.

 You are given the following LZ-encoded string:
 &nbsp; &nbsp; 7UOGTrq8259V6GTVrvu8375DC0VN745c0Ve2519c2KyXjKyX722g2491x640996Xt1OXt
 Decode it and output the original string.

 Example: decoding '5aaabb450723abb' chunk-by-chunk
 &nbsp; &nbsp; 5aaabb &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;aaabb
 &nbsp; &nbsp; 5aaabb45 &nbsp; &nbsp; &nbsp; &nbsp; -> &nbsp;aaabbaaab
 &nbsp; &nbsp; 5aaabb450 &nbsp; &nbsp; &nbsp; &nbsp;-> &nbsp;aaabbaaab
 &nbsp; &nbsp; 5aaabb45072 &nbsp; &nbsp; &nbsp;-> &nbsp;aaabbaaababababa
 &nbsp; &nbsp; 5aaabb450723abb &nbsp;-> &nbsp;aaabbaaababababaabb
dump-contract-types.js: 7UOGTrq8259V6GTVrvu8375DC0VN745c0Ve2519c2KyXjKyX722g2491x640996Xt1OXt
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Find All Valid Math Expressions
dump-contract-types.js: You are given the following string which contains only digits between 0 and 9:

 6966

 You are also given a target number of 77. Return all possible ways you can add the +(add), -(subtract), and *(multiply) operators to the string such that it evaluates to the target number. (Normal order of operations applies.)

 The provided answer should be an array of strings containing the valid expressions. The data provided by this problem is an array with two elements. The first element is the string of digits, while the second element is the target number:

 ["6966", 77]

 NOTE: The order of evaluation expects script operator precedence NOTE: Numbers in the expression cannot have leading 0's. In other words, "1+01" is not a valid expression Examples:

 Input: digits = "123", target = 6
 Output: [1+2+3, 1*2*3]

 Input: digits = "105", target = 5
 Output: [1*0+5, 10-5]
dump-contract-types.js: ["6966",77]
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Proper 2-Coloring of a Graph
dump-contract-types.js: You are given the following data, representing a graph:
 [11,[[3,10],[0,9],[8,9],[2,3],[1,4],[1,5],[3,6],[0,10],[8,10],[7,10],[5,8],[3,7],[1,9]]]
 Note that "graph", as used here, refers to the field of graph theory, and has no relation to statistics or plotting. The first element of the data represents the number of vertices in the graph. Each vertex is a unique number between 0 and 10. The next element of the data represents the edges of the graph. Two vertices u,v in a graph are said to be adjacent if there exists an edge [u,v]. Note that an edge [u,v] is the same as an edge [v,u], as order does not matter. You must construct a 2-coloring of the graph, meaning that you have to assign each vertex in the graph a "color", either 0 or 1, such that no two adjacent vertices have the same color. Submit your answer in the form of an array, where element i represents the color of vertex i. If it is impossible to construct a 2-coloring of the given graph, instead submit an empty array.

 Examples:

 Input: [4, [[0, 2], [0, 3], [1, 2], [1, 3]]]
 Output: [0, 0, 1, 1]

 Input: [3, [[0, 1], [0, 2], [1, 2]]]
 Output: []
dump-contract-types.js: [11,[[3,10],[0,9],[8,9],[2,3],[1,4],[1,5],[3,6],[0,10],[8,10],[7,10],[5,8],[3,7],[1,9]]]
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: HammingCodes: Integer to Encoded Binary
dump-contract-types.js: You are given the following decimal Value: 
 14 
 Convert it to a binary representation and encode it as an 'extended Hamming code'. Eg:
  Value 8 is expressed in binary as '1000', which will be encoded with the pattern 'pppdpddd', where p is a parity bit and d a data bit. The encoding of
 8 is 11110000. As another example, '10101' (Value 21) will result into (pppdpdddpd) '1001101011'.
 The answer should be given as a string containing only 1s and 0s.
 NOTE: the endianness of the data bits is reversed in relation to the endianness of the parity bits.
 NOTE: The bit at index zero is the overall parity bit, this should be set last.
 NOTE 2: You should watch the Hamming Code video from 3Blue1Brown, which explains the 'rule' of encoding, including the first index parity bit mentioned in the previous note.

 Extra rule for encoding:
 There should be no leading zeros in the 'data bit' section
dump-contract-types.js: 14
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Array Jumping Game
dump-contract-types.js: You are given the following array of integers:

 0,8,0,4,0,3,0,5,5,0,3,8,7,3,7,8,0

 Each element in the array represents your MAXIMUM jump length at that position. This means that if you are at position i and your maximum jump length is n, you can jump to any position from i to i+n. 

Assuming you are initially positioned at the start of the array, determine whether you are able to reach the last index.

 Your answer should be submitted as 1 or 0, representing true and false respectively
dump-contract-types.js: [0,8,0,4,0,3,0,5,5,0,3,8,7,3,7,8,0]
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Sanitize Parentheses in Expression
dump-contract-types.js: Given the following string:

 (a)()a)((a())

 remove the minimum number of invalid parentheses in order to validate the string. If there are multiple minimal ways to validate the string, provide all of the possible results. The answer should be provided as an array of strings. If it is impossible to validate the string the result should be an array with only an empty string.

 IMPORTANT: The string may contain letters, not just parentheses. Examples:
 "()())()" -> [()()(), (())()]
 "(a)())()" -> [(a)()(), (a())()]
 ")(" -> [""]
dump-contract-types.js: (a)()a)((a())
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Algorithmic Stock Trader IV
dump-contract-types.js: You are given the following array with two elements:

 [5, [92,156,61,173,112,154,50,113,47,75,166,99,41,119,31,67,63,124,25]]

 The first element is an integer k. The second element is an array of stock prices (which are numbers) where the i-th element represents the stock price on day i.

 Determine the maximum possible profit you can earn using at most k transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you can buy it again.

 If no profit can be made, then the answer should be 0.
dump-contract-types.js: [5,[92,156,61,173,112,154,50,113,47,75,166,99,41,119,31,67,63,124,25]]
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: HammingCodes: Encoded Binary to Integer
dump-contract-types.js: You are given the following encoded binary string: 
 '1100100000000000001000000000011101110000101111100101011001010111' 

 Treat it as an extended Hamming code with 1 'possible' error at a random index.
 Find the 'possible' wrong bit, fix it and extract the decimal value, which is hidden inside the string.

 Note: The length of the binary string is dynamic, but its encoding/decoding follows Hamming's 'rule'
 Note 2: Index 0 is an 'overall' parity bit. Watch the Hamming code video from 3Blue1Brown for more information
 Note 3: There's a ~55% chance for an altered Bit. So... MAYBE there is an altered Bit 😉
 Note: The endianness of the encoded decimal value is reversed in relation to the endianness of the Hamming code. Where the Hamming code is expressed as little-endian (LSB at index 0), the decimal value encoded in it is expressed as big-endian (MSB at index 0).
 Extra note for automation: return the decimal value as a string
dump-contract-types.js: 1100100000000000001000000000011101110000101111100101011001010111
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Subarray with Maximum Sum
dump-contract-types.js: Given the following integer array, find the contiguous subarray (containing at least one number) which has the largest sum and return that sum. 'Sum' refers to the sum of all the numbers in the subarray.
 -9,-1,6,-8,-2,-3,-6,-10,-8,7,-8
dump-contract-types.js: [-9,-1,6,-8,-2,-3,-6,-10,-8,7,-8]
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Algorithmic Stock Trader III
dump-contract-types.js: You are given the following array of stock prices (which are numbers) where the i-th element represents the stock price on day i:

 200,5,51,116,142,175,168,168,193,128,192,124,138,124,24,191,54,29,106,105,162,91,76,196,98,130,101,79,114,46,137,182,67,168,98,149,131,154,93,61

 Determine the maximum possible profit you can earn using at most two transactions. A transaction is defined as buying and then selling one share of the stock. Note that you cannot engage in multiple transactions at once. In other words, you must sell the stock before you buy it again.

 If no profit can be made, then the answer should be 0
dump-contract-types.js: [200,5,51,116,142,175,168,168,193,128,192,124,138,124,24,191,54,29,106,105,162,91,76,196,98,130,101,79,114,46,137,182,67,168,98,149,131,154,93,61]
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Spiralize Matrix
dump-contract-types.js: Given the following array of arrays of numbers representing a 2D matrix, return the elements of the matrix as an array in spiral order:

&nbsp;&nbsp;&nbsp;&nbsp;[
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[16,49, 6,27, 8,24,34,44,41,46,46,40,47,35,14]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[14,47,18, 6,26,46,37,39,30, 5,47,37,25,42, 2]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[19,21,26,22,35,22,11,28,38,20,43,25,24,49,26]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[27, 9,20,27,28,48,35,12,21,10,15, 5,10,24, 1]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[ 8,33,14,12,29,23,30,26,10,48,29,14,25,48,44]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[32, 4,24,46,12,13,28,18,17, 3, 3,34, 4,31,11]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[49,36, 2,20, 1,34, 1, 6,34,40,11,22,22,43,43]
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[21,11,46,11,14,34,37,13,10,18,30,43,45,24,33]
&nbsp;&nbsp;&nbsp;&nbsp;]

Here is an example of what spiral order should be:

 &nbsp;&nbsp;&nbsp;&nbsp;[
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1, 2, 3]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[4, 5, 6]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[7, 8, 9]
 &nbsp;&nbsp;&nbsp;&nbsp;]

 Answer: [1, 2, 3, 6, 9, 8 ,7, 4, 5]

 Note that the matrix will not always be square:

 &nbsp;&nbsp;&nbsp;&nbsp;[
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,&nbsp;&nbsp;2,&nbsp;&nbsp;3,&nbsp;&nbsp;4]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[5,&nbsp;&nbsp;6,&nbsp;&nbsp;7,&nbsp;&nbsp;8]
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[9,&nbsp;10,&nbsp;11,&nbsp;12]
 &nbsp;&nbsp;&nbsp;&nbsp;]

 Answer: [1, 2, 3, 4, 8, 12, 11, 10, 9, 5, 6, 7]
dump-contract-types.js: [[16,49,6,27,8,24,34,44,41,46,46,40,47,35,14],[14,47,18,6,26,46,37,39,30,5,47,37,25,42,2],[19,21,26,22,35,22,11,28,38,20,43,25,24,49,26],[27,9,20,27,28,48,35,12,21,10,15,5,10,24,1],[8,33,14,12,29,23,30,26,10,48,29,14,25,48,44],[32,4,24,46,12,13,28,18,17,3,3,34,4,31,11],[49,36,2,20,1,34,1,6,34,40,11,22,22,43,43],[21,11,46,11,14,34,37,13,10,18,30,43,45,24,33]]
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Unique Paths in a Grid II
dump-contract-types.js: You are located in the top-left corner of the following grid:

 0,0,0,0,1,0,0,0,1,0,0,
1,0,0,0,0,1,0,0,0,0,0,
1,1,0,0,0,0,1,0,1,1,0,
1,0,0,0,0,0,0,0,0,0,0,
1,0,0,1,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,
1,1,0,0,1,0,0,0,0,0,0,
0,0,0,1,0,0,0,0,0,0,0,
0,1,0,0,0,1,1,0,0,0,0,
0,0,0,0,0,0,0,0,1,0,1,
0,0,0,0,0,0,1,0,0,0,0,

 You are trying reach the bottom-right corner of the grid, but you can only move down or right on each step. Furthermore, there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.

 Determine how many unique paths there are from start to finish.

 NOTE: The data returned for this contract is an 2D array of numbers representing the grid.
dump-contract-types.js: [[0,0,0,0,1,0,0,0,1,0,0],[1,0,0,0,0,1,0,0,0,0,0],[1,1,0,0,0,0,1,0,1,1,0],[1,0,0,0,0,0,0,0,0,0,0],[1,0,0,1,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0],[1,1,0,0,1,0,0,0,0,0,0],[0,0,0,1,0,0,0,0,0,0,0],[0,1,0,0,0,1,1,0,0,0,0],[0,0,0,0,0,0,0,0,1,0,1],[0,0,0,0,0,0,1,0,0,0,0]]
dump-contract-types.js: * * * * * * * * * *
dump-contract-types.js: Shortest Path in a Grid
dump-contract-types.js: You are located in the top-left corner of the following grid:

 &nbsp;&nbsp;[[0,0,0,0,0,0,0,0,0],
&nbsp;&nbsp;&nbsp;[0,0,0,0,0,1,0,1,0],
&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,0],
&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,0,1],
&nbsp;&nbsp;&nbsp;[1,0,1,0,1,0,1,0,0],
&nbsp;&nbsp;&nbsp;[0,0,0,0,0,0,0,1,1],
&nbsp;&nbsp;&nbsp;[0,1,0,1,0,0,0,0,0],
&nbsp;&nbsp;&nbsp;[0,0,1,0,0,1,0,0,0],
&nbsp;&nbsp;&nbsp;[1,1,0,0,0,0,0,0,0],
&nbsp;&nbsp;&nbsp;[0,1,0,0,0,0,0,1,0]]

 You are trying to find the shortest path to the bottom-right corner of the grid, but there are obstacles on the grid that you cannot move onto. These obstacles are denoted by '1', while empty spaces are denoted by 0.

 Determine the shortest path from start to finish, if one exists. The answer should be given as a string of UDLR characters, indicating the moves along the path

 NOTE: If there are multiple equally short paths, any of them is accepted as answer. If there is no path, the answer should be an empty string.
 NOTE: The data returned for this contract is an 2D array of numbers representing the grid.

 Examples:

 &nbsp;&nbsp;&nbsp;&nbsp;[[0,1,0,0,0],
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[0,0,0,1,0]]
 
 Answer: 'DRRURRD'

 &nbsp;&nbsp;&nbsp;&nbsp;[[0,1],
 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[1,0]]
 
 Answer: ''

dump-contract-types.js: [[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,1,0,1,0],[0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,1],[1,0,1,0,1,0,1,0,0],[0,0,0,0,0,0,0,1,1],[0,1,0,1,0,0,0,0,0],[0,0,1,0,0,1,0,0,0],[1,1,0,0,0,0,0,0,0],[0,1,0,0,0,0,0,1,0]]
dump-contract-types.js: * * * * * * * * * *
